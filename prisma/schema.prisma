generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["referentialActions"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Admin {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  image_url String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Services {
  id        String   @id @default(cuid())
  name      String   @unique
  author    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Categories {
  id             String          @id @default(cuid())
  name           String          @unique
  serviceType    String
  archived       Boolean
  featured       Boolean
  description    String
  categoriesIcon CategoriesIcon?
  author         String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
}

model CategoriesIcon {
  id           String      @id @default(cuid())
  downloadLink String
  public_id    String
  categories   Categories? @relation(fields: [categoriesId], references: [id], onDelete: Cascade)
  categoriesId String?     @unique
}
